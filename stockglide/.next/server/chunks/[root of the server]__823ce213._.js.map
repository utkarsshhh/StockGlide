{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/utkarshpadia/Desktop/StockGlide/stockglide/lib/db.ts"],"sourcesContent":["export const db = {\n    users: new Map<string, any>(),\n    \n    \n    async createUser(userData: any): Promise<any> {\n\n      const id = Math.random().toString(36).substring(2, 15);\n      const user = {\n        id,\n        ...userData,\n        createdAt: new Date().toISOString(),\n      };\n      this.users.set(id, user);\n      return user;\n    },\n    \n    async getUserByEmail(email: string): Promise<any | null> {\n        console.log(this.users)\n      for (const user of this.users.values()) {\n        if (user.email === email) return user;\n      }\n      return null;\n    },\n    \n    async getUserById(id: string): Promise<any | null> {\n      return this.users.get(id) || null;\n    },\n    \n    async updateUser(id: string, data: any): Promise<any> {\n      const user = this.users.get(id);\n      if (!user) return null;\n      \n      const updatedUser = { ...user, ...data };\n      this.users.set(id, updatedUser);\n      return updatedUser;\n    }\n  };"],"names":[],"mappings":";;;AAAO,MAAM,KAAK;IACd,OAAO,IAAI;IAGX,MAAM,YAAW,QAAa;QAE5B,MAAM,KAAK,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;QACnD,MAAM,OAAO;YACX;YACA,GAAG,QAAQ;YACX,WAAW,IAAI,OAAO,WAAW;QACnC;QACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI;QACnB,OAAO;IACT;IAEA,MAAM,gBAAe,KAAa;QAC9B,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK;QACxB,KAAK,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAI;YACtC,IAAI,KAAK,KAAK,KAAK,OAAO,OAAO;QACnC;QACA,OAAO;IACT;IAEA,MAAM,aAAY,EAAU;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;IAC/B;IAEA,MAAM,YAAW,EAAU,EAAE,IAAS;QACpC,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,MAAM,OAAO;QAElB,MAAM,cAAc;YAAE,GAAG,IAAI;YAAE,GAAG,IAAI;QAAC;QACvC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI;QACnB,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/utkarshpadia/Desktop/StockGlide/stockglide/app/api/login.ts"],"sourcesContent":["const BASE_URL = 'http://localhost:8080'\n\nexport async function validateLogin(creds){\n    const response = await fetch(`${BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(creds),\n        credentials: 'include', // ⬅️ Important if backend sets HttpOnly cookies\n      });\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.error || 'Login failed');\n      }\n    \n      const data = await response.json();\n      return data;\n    \n}"],"names":[],"mappings":";;;AAAA,MAAM,WAAW;AAEV,eAAe,cAAc,KAAK;IACrC,MAAM,WAAW,MAAM,MAAM,GAAG,SAAS,eAAe,CAAC,EAAE;QACvD,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;QACrB,aAAa;IACf;IACA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;IAChC;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,OAAO;AAEb","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/utkarshpadia/Desktop/StockGlide/stockglide/lib/auth.ts"],"sourcesContent":["import { db } from './db';\nimport { cookies } from 'next/headers';\nimport { User, LoginCredentials, RegisterData } from '@/types/user';\nimport { validateLogin } from '@/app/api/login';\n\n// For demo purposes only - in a real app, use a proper authentication library\nexport async function register(data: RegisterData): Promise<User | null> {\n  const existingUser = await db.getUserByEmail(data.email);\n  if (existingUser) {\n    throw new Error('User already exists with this email');\n  }\n  \n  // In a real app, hash the password before storing\n  const user = await db.createUser({\n    username: data.username,\n    email: data.email,\n    password: data.password, // This should be hashed\n    name: data.name || data.username,\n  });\n  \n  // Remove password before returning user data\n  const { password, ...userWithoutPassword } = user;\n  return userWithoutPassword;\n}\n\nexport async function login(credentials: LoginCredentials){\n    try{\n    const user = await validateLogin(credentials)\n    console.log(user)\n    const cookieStore = await cookies();\n  console.log(\"user \",user)\n//   cookieStore.set('session', user.user_id, { \n//     httpOnly: true,\n//     secure: process.env.NODE_ENV === 'production',\n//     maxAge: 60 * 60 * 24, // 1 week\n//     path: '/',\n//   });\n//   cookieStore.set('token', user.token, {\n//     httpOnly: true,\n//     path: '/',\n//     maxAge: 60 * 60 * 24, // 1 day\n//     secure: process.env.NODE_ENV === 'production',\n//     sameSite: 'lax',\n//   });\n//   cookieStore.set('user_id', user.user_id.toString(), {\n//     httpOnly: false, // can be read on frontend\n//     path: '/',\n//     maxAge: 60 * 60 * 24,\n//   });\n  \n  // Remove password before returning user data\n//   const { password, ...userWithoutPassword } = user;\n//   return userWithoutPassword;\n    return user\n    }\n    catch(error){\n        throw new Error('Invalid credentials');\n    }\n\n    \n    \n  \n  \n  // In a real app, use a proper session management system\n  // For demo, we'll set a cookie with the user ID\n  \n}\n\nexport async function getCurrentUser(): Promise<User | null> {\n  const cookieStore =  await cookies();\n\n  const sessionCookie = cookieStore.get('user_id');\n  console.log(sessionCookie)\n//   console.log(\"current user \")\n//   if (!sessionCookie?.value) return null;\n  if (sessionCookie){\n  const user = await db.getUserById(sessionCookie.value);\n  if (!user) return null;\n  return user;\n  }\n  else{\n    return null\n  }\n  \n  // Remove password before returning user data\n//   const { password, ...userWithoutPassword } = user;\n  \n}\n\nexport async function logout() {\nconst cookieStore = await cookies();\ncookieStore.delete('token');\ncookieStore.delete('user_id');\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;AAGO,eAAe,SAAS,IAAkB;IAC/C,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,cAAc,CAAC,KAAK,KAAK;IACvD,IAAI,cAAc;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,kDAAkD;IAClD,MAAM,OAAO,MAAM,2GAAA,CAAA,KAAE,CAAC,UAAU,CAAC;QAC/B,UAAU,KAAK,QAAQ;QACvB,OAAO,KAAK,KAAK;QACjB,UAAU,KAAK,QAAQ;QACvB,MAAM,KAAK,IAAI,IAAI,KAAK,QAAQ;IAClC;IAEA,6CAA6C;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,GAAG;IAC7C,OAAO;AACT;AAEO,eAAe,MAAM,WAA6B;IACrD,IAAG;QACH,MAAM,OAAO,MAAM,CAAA,GAAA,qHAAA,CAAA,gBAAa,AAAD,EAAE;QACjC,QAAQ,GAAG,CAAC;QACZ,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAClC,QAAQ,GAAG,CAAC,SAAQ;QACtB,gDAAgD;QAChD,sBAAsB;QACtB,qDAAqD;QACrD,sCAAsC;QACtC,iBAAiB;QACjB,QAAQ;QACR,2CAA2C;QAC3C,sBAAsB;QACtB,iBAAiB;QACjB,qCAAqC;QACrC,qDAAqD;QACrD,uBAAuB;QACvB,QAAQ;QACR,0DAA0D;QAC1D,kDAAkD;QAClD,iBAAiB;QACjB,4BAA4B;QAC5B,QAAQ;QAEN,6CAA6C;QAC/C,uDAAuD;QACvD,gCAAgC;QAC5B,OAAO;IACP,EACA,OAAM,OAAM;QACR,MAAM,IAAI,MAAM;IACpB;AAMF,wDAAwD;AACxD,gDAAgD;AAElD;AAEO,eAAe;IACpB,MAAM,cAAe,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEjC,MAAM,gBAAgB,YAAY,GAAG,CAAC;IACtC,QAAQ,GAAG,CAAC;IACd,iCAAiC;IACjC,4CAA4C;IAC1C,IAAI,eAAc;QAClB,MAAM,OAAO,MAAM,2GAAA,CAAA,KAAE,CAAC,WAAW,CAAC,cAAc,KAAK;QACrD,IAAI,CAAC,MAAM,OAAO;QAClB,OAAO;IACP,OACI;QACF,OAAO;IACT;AAEA,6CAA6C;AAC/C,uDAAuD;AAEvD;AAEO,eAAe;IACtB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,YAAY,MAAM,CAAC;IACnB,YAAY,MAAM,CAAC;AACnB","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///Users/utkarshpadia/Desktop/StockGlide/stockglide/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { login } from '@/lib/auth';\nimport { ApiResponse } from '@/types/api';\nimport { User } from '@/types/user';\n\nexport async function POST(request: NextRequest): Promise<NextResponse<ApiResponse<User>>> {\n  try {\n    const body = await request.json();\n    console.log(\"body \",body)\n    const user = await login(body);\n    console.log(\"user \",user)\n    const res =  NextResponse.json({\n      success: true,\n      data: user,\n    });\n    res.cookies.set('token', user.token, {\n        httpOnly: true,\n        path: '/',\n        maxAge: 60 * 60, // 1 hour\n        secure: true,\n        sameSite: 'lax',\n        \n      });\n      res.cookies.set('user_id', user.user_id.toString(), {\n        httpOnly: true, // can be read on frontend\n        path: '/',\n        maxAge: 60 * 60,\n        secure: true,\n        sameSite: 'lax',  //1 hour,\n      });\n      return res\n  } catch (error) {\n    console.log(error)\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'An error occurred during login'\n    }, { status: 400 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAIO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,SAAQ;QACpB,MAAM,OAAO,MAAM,CAAA,GAAA,6GAAA,CAAA,QAAK,AAAD,EAAE;QACzB,QAAQ,GAAG,CAAC,SAAQ;QACpB,MAAM,MAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC7B,SAAS;YACT,MAAM;QACR;QACA,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,KAAK,EAAE;YACjC,UAAU;YACV,MAAM;YACN,QAAQ,KAAK;YACb,QAAQ;YACR,UAAU;QAEZ;QACA,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,OAAO,CAAC,QAAQ,IAAI;YAClD,UAAU;YACV,MAAM;YACN,QAAQ,KAAK;YACb,QAAQ;YACR,UAAU;QACZ;QACA,OAAO;IACX,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}